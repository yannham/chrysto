// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Char from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/char.js";
import * as $$Array from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/curry.js";
import * as $$Buffer from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/buffer.js";
import * as $$String from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/string.js";
import * as Caml_array from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/caml_int32.js";
import * as Caml_string from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/caml_string.js";
import * as Utils$Chrysto from "./utils.bs.js";

function key_from_string(s) {
  var buffer = $$Buffer.create(s.length);
  $$String.iter((function (c) {
          if (c >= 91) {
            if (c > 122 || c < 97) {
              return ;
            } else {
              return $$Buffer.add_char(buffer, c);
            }
          } else if (c >= 65) {
            return $$Buffer.add_char(buffer, Char.chr((c - /* 'A' */65 | 0) + /* 'a' */97 | 0));
          } else {
            return ;
          }
        }), s);
  return $$Buffer.contents(buffer);
}

function key_to_string(key) {
  return key;
}

var square = $$Array.make_matrix(26, 26, /* 'a' */97);

for(var i = 0; i <= 25; ++i){
  for(var j = 0; j <= 25; ++j){
    Caml_array.set(Caml_array.get(square, i), j, Utils$Chrysto.from_index((i + j | 0) % 26));
  }
}

var square$1 = $$Array.make_matrix(26, 26, /* 'a' */97);

for(var i$1 = 0; i$1 <= 25; ++i$1){
  for(var j$1 = 0; j$1 <= 25; ++j$1){
    Caml_array.set(Caml_array.get(square$1, i$1), (i$1 + j$1 | 0) % 26, Utils$Chrysto.from_index(j$1));
  }
}

function encode_char_with(square, key, index, c) {
  var index$1 = Caml_int32.mod_(index, key.length);
  var i = Utils$Chrysto.unwrap(Utils$Chrysto.index(Caml_string.get(key, index$1)));
  var get_subst = function (j) {
    return Caml_array.get(Caml_array.get(square, i), j);
  };
  if (Utils$Chrysto.is_uppercase(c)) {
    var j = Utils$Chrysto.index(Char.lowercase_ascii(c));
    if (j !== undefined) {
      return Char.uppercase_ascii(get_subst(j));
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "vigenere.ml",
            44,
            16
          ],
          Error: new Error()
        };
  }
  var j$1 = Utils$Chrysto.index(c);
  if (j$1 !== undefined) {
    return get_subst(j$1);
  } else {
    return c;
  }
}

function encode_char(key, index, c) {
  return encode_char_with(square, key, index, c);
}

function encode(key, source) {
  return $$String.mapi((function (param, param$1) {
                return encode_char(key, param, param$1);
              }), source);
}

function decode_char(key, index, c) {
  return encode_char_with(square$1, key, index, c);
}

function decode(key, source) {
  return $$String.mapi((function (param, param$1) {
                return decode_char(key, param, param$1);
              }), source);
}

function make_encoder(key) {
  return [
          {
            contents: 0
          },
          key,
          /* Encode */0
        ];
}

function make_decoder(key) {
  return [
          {
            contents: 0
          },
          key,
          /* Decode */1
        ];
}

function next(param, c) {
  var index = param[0];
  var coder = param[2] ? decode_char : encode_char;
  var result = Curry._3(coder, param[1], index.contents, c);
  index.contents = index.contents + 1 | 0;
  return result;
}

function back(param) {
  var index = param[0];
  if (index.contents === 0) {
    return ;
  } else {
    index.contents = index.contents - 1 | 0;
    return ;
  }
}

function reset(param) {
  param[0].contents = 0;
  
}

function index(param) {
  return param[0].contents;
}

var Stream = {
  make_encoder: make_encoder,
  make_decoder: make_decoder,
  next: next,
  back: back,
  reset: reset,
  index: index
};

var vigenere_square = square;

var vigenere_square_inv = square$1;

export {
  key_from_string ,
  key_to_string ,
  vigenere_square ,
  vigenere_square_inv ,
  encode ,
  encode_char ,
  decode ,
  decode_char ,
  Stream ,
  
}
/* square Not a pure module */
