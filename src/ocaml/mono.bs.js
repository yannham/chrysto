// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Char from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/char.js";
import * as $$Array from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/array.js";
import * as Bytes from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/bytes.js";
import * as $$Buffer from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/buffer.js";
import * as $$String from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/string.js";
import * as Caml_array from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/caml_array.js";
import * as Caml_bytes from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/caml_bytes.js";
import * as Pervasives from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/pervasives.js";
import * as Caml_option from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/caml_option.js";
import * as Caml_string from "../../../../../../../usr/local/lib/node_modules/bs-platform/lib/es6/caml_string.js";

function index(c) {
  var diff = c - /* 'a' */97 | 0;
  if (diff >= 0 && diff < 24) {
    return diff;
  }
  
}

function unwrap(v) {
  if (v !== undefined) {
    return Caml_option.valFromOption(v);
  } else {
    return Pervasives.failwith("unwrap");
  }
}

function is_uppercase(c) {
  if (c >= /* 'A' */65) {
    return c <= /* 'Z' */90;
  } else {
    return false;
  }
}

function inv(subst) {
  var buffer = Caml_bytes.caml_create_bytes(24);
  $$String.iteri((function (i, c) {
          var rev_index = unwrap(index(c));
          return Caml_bytes.set(buffer, rev_index, Char.chr(/* 'a' */97 + i | 0));
        }), subst);
  return Bytes.to_string(buffer);
}

function subst_from_key(key) {
  var key$1 = $$String.lowercase_ascii(key);
  var buffer = $$Buffer.create(24);
  var found = Caml_array.caml_make_vect(24, false);
  $$String.iter((function (c) {
          var i = index(c);
          if (i === undefined) {
            return ;
          }
          if (Caml_array.get(found, i) === true) {
            return ;
          }
          if (Caml_array.get(found, i) === false) {
            Caml_array.set(found, i, true);
            return $$Buffer.add_char(buffer, c);
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "mono.ml",
                  36,
                  13
                ],
                Error: new Error()
              };
        }), key$1);
  $$Array.iteri((function (index, added) {
          if (!added) {
            return $$Buffer.add_char(buffer, Char.chr(/* 'a' */97 + index | 0));
          }
          
        }), found);
  return $$Buffer.contents(buffer);
}

function encode_char(subst, c) {
  if (is_uppercase(c)) {
    var i = index(c);
    if (i !== undefined) {
      return Char.uppercase_ascii(Caml_string.get(subst, i));
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "mono.ml",
            50,
            16
          ],
          Error: new Error()
        };
  }
  var i$1 = index(c);
  if (i$1 !== undefined) {
    return Caml_string.get(subst, i$1);
  } else {
    return c;
  }
}

function encode(subst, source) {
  return $$String.map((function (param) {
                return encode_char(subst, param);
              }), source);
}

function decode_char(subst, c) {
  return encode_char(inv(subst), c);
}

function decode(subst, source) {
  var subst$1 = inv(subst);
  return $$String.map((function (param) {
                return encode_char(subst$1, param);
              }), source);
}

export {
  subst_from_key ,
  inv ,
  encode ,
  encode_char ,
  decode ,
  decode_char ,
  
}
/* No side effect */
